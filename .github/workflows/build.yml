name: Build, test and publish

on:
  push:
    branches: '**'
  workflow_dispatch:

jobs:
  build:
    name: Build and unit test code
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.build.outputs.version }}
      artifact_name: ${{ steps.package.outputs.package_filename }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Run Build üèó
      id: build
      run: |
        dotnet publish ./source/WebApplication/WebApplication.csproj --output published -p:Version=2.1.${{ github.run_number }}
        echo "version=2.1.0-demo${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
        echo "output_folder=published" >> $GITHUB_OUTPUT

    - name: Create Zip package üêô
      id: package
      uses: OctopusDeploy/create-zip-package-action@fix-directoryhandling
      with:
        package_id: DemoNetCoreWebAppGHA
        version: ${{ steps.build.outputs.version }}
        base_path: ${{ steps.build.outputs.output_folder }}
        files: '**/*'
        output_folder: packaged

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.package.outputs.package_filename }}
        path: ${{ steps.package.outputs.package_file_path }}

  push:
    name: Push information to Octopus
    needs: build
    runs-on: ubuntu-latest

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: package

    - name: Push a package to Octopus Deploy üêô
      uses: OctopusDeploy/push-package-action@main
      with:
        packages: package/${{ needs.build.outputs.artifact_name }}

    - name: Push build information to Octopus Deploy üêô
      uses: OctopusDeploy/push-build-information-action@main
      with:
        version: ${{ needs.build.outputs.version }}
        packages: DemoNetCoreWebAppGHA

  snapshot:
    name: Snapshot information in Octopus
    needs: [build, push]
    runs-on: ubuntu-latest

    outputs:
      release_number: ${{ steps.create_release.outputs.release_number }}

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    steps:
    - name: Create a release in Octopus Deploy üêô
      id: 'create_release'
      uses: OctopusDeploy/create-release-action@bug-executionapiversioncheck
      with:
        project: 'DemoNetCoreWebApp'
        package_version: ${{ needs.build.outputs.version }}

  deploy:
    name: Deploy snapshot using Octopus
    needs: [build, snapshot]
    runs-on: ubuntu-latest

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    outputs:
      server_tasks: ${{ steps.queue_deployments.outputs.server_tasks }}

    steps:
    - name: Deploy the release in Octopus Deploy üêô
      uses: OctopusDeploy/deploy-release-tenanted-action@main
      id: 'queue_deployments'
      with:
        project: 'DemoNetCoreWebApp'
        release_number: ${{ needs.snapshot.outputs.release_number }}
        environment: Development
        tenants: Mars
        tenant_tags: |
          planets/gas giants

  wait:
    needs: deploy
    runs-on: ubuntu-latest
    name: ${{ matrix.deployment.tenantName }}

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    strategy:
      matrix:
        deployment: ${{ fromJson(needs.deploy.outputs.server_tasks) }}

    steps:
    - name: Waiting for deployment in Octopus Deploy üêô
      uses: OctopusDeploy/await-task-action@main
      with:
        server_task_id: ${{ matrix.deployment.serverTaskId }}

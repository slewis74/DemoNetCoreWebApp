name: Build, test and publish

on:
  push:
    branches: '**'
  workflow_dispatch:

jobs:
  build:
    name: Build and unit test code
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.build.outputs.version }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Run Build üèó
      id: build
      run: |
        dotnet publish ./source/WebApplication/WebApplication.csproj --output published -p:Version=2.0.${{ github.run_number }}
        (cd published && zip -r "$OLDPWD/DemoNetCoreWebAppGHA.2.0.${{ github.run_number }}.zip" .)
        echo "version=2.0.${{ github.run_number }}" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v3
      with:
        name: DemoNetCoreWebAppGHA.2.0.${{ github.run_number }}
        path: DemoNetCoreWebAppGHA.2.0.${{ github.run_number }}.zip

  push:
    name: Push information to Octopus
    needs: build
    runs-on: ubuntu-latest

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: DemoNetCoreWebAppGHA.2.0.${{ github.run_number }}
        path: package

    - name: Push a package to Octopus Deploy üêô
      uses: OctopusDeploy/push-package-action@enh-clientupdate
      with:
        packages: package/DemoNetCoreWebAppGHA.${{ needs.build.outputs.version }}.zip

    - name: Push build information to Octopus Deploy üêô
      uses: OctopusDeploy/push-build-information-action@enh-clientupdate
      with:
        version: ${{ needs.build.outputs.version }}
        packages: DemoNetCoreWebAppGHA

  snapshot:
    name: Snapshot information in Octopus
    needs: [build, push]
    runs-on: ubuntu-latest

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    steps:
    - name: Create a release in Octopus Deploy üêô
      uses: OctopusDeploy/create-release-action@enh-executions-api
      with:
        project: 'DemoNetCoreWebApp'
        package_version: ${{ needs.build.outputs.version }}

  deploy:
    name: Deploy snapshot using Octopus
    needs: [build, snapshot]
    runs-on: ubuntu-latest

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    outputs:
      server_tasks: ${{ steps.queue_deployments.outputs.server_tasks }}

    steps:
    - name: Deploy the release in Octopus Deploy üêô
      uses: OctopusDeploy/deploy-release-untenanted-action@enh-initial-version
      id: 'queue_deployments'
      with:
        project: 'DemoNetCoreWebApp'
        release_number: ${{ needs.build.outputs.version }}
        environments: |
          Development
          Integration

  wait:
    needs: deploy
    runs-on: ubuntu-latest
    name: ${{ matrix.deployment.environmentName }}

    env:
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: 'GHA Demo'

    strategy:
      matrix:
        deployment: ${{ fromJson(needs.deploy.outputs.server_tasks) }}

    steps:
    - name: Waiting for deployment in Octopus Deploy üêô
      uses: OctopusDeploy/await-task-action@enh-initialversion
      with:
        server_task_id: ${{ matrix.deployment.serverTaskId }}
